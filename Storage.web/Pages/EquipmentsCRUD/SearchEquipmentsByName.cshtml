@page
@using AutoGens
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@{
    ViewData["Title"] = "Search Equipments By Name";
}
<h1>@ViewData["Title"]</h1>

@functions
{
    string? Message {get; set;} // message of error if the equipment id doesn't exist
    bool EquipmentExist {get; set;}
    string? UserName {get; set; }

    // IActionResult is a flexible interface, you can choose what you want to return for the client, views, redirect to other pages, like in this case
    public IActionResult OnGet(string EquipmentName, string username)
    {
        if(username != null)  Model.UserName = username;
        Model.Message = "";
        if(EquipmentName != null && EquipmentName != "")
        {
            EquipmentExist = VerifyEquipmentsNameExistence(EquipmentName);
            if(EquipmentExist == false)
            {
                Console.WriteLine("Equipment ID is not registered");
                Model.Message = $"There are no Equipments found with the Equipment Name : {EquipmentName}";
            }
            else
            {
                TempData["NameSearched"] = EquipmentName;
                TempData["IdSearched"] = "";
                TempData["UserName"] = Model.UserName;
                Console.WriteLine("The Equipment Id exists");
                return RedirectToPage("/EquipmentsCRUD/ViewMoreThanOneEquipments");
            }
        }
        return Page();
    }

    public static bool VerifyEquipmentsNameExistence(string SearchTerm)
    {
        using (bd_storage db = new())
        {
            // query encuentra los equipos de la tabla Equipments donde el nombre del equipo empiece con el SearchItem
            IQueryable<Equipment>? Equipments = db.Equipments
                .Include(e => e.Area)
                .Include(e => e.Status)
                .Include(e => e.Coordinator)
                .Where(e => e.Name.StartsWith(SearchTerm)); // Utiliza StartsWith para buscar equipos cuyos nombres comiencen con el término de búsqueda
            if (!Equipments.Any()) // si no existen ningun equipo en la lista
            {
                Console.WriteLine("No equipment found matching the search term:  " + SearchTerm);
                return false;
            }
            //if equipments exist
            return true;
        }
    }
}


<h4>Search the Equipment Name you would like to see:</h4>
    @if (Model.Message!= "")
    {
        <div class="error-message">
            @Model.Message
        </div>
    }
    <form method="get" action="/EquipmentsCRUD/SearchEquipmentsByName">
        <input type="hidden" name="username" value="@Model.UserName">
        <input type="text" class="form-control" id="EquipmentId" name="EquipmentName" maxlength="15" required>
        <br>
        <button type="submit" class="btn btn-primary" name="action" value="confirm">Search</button>
    </form>


