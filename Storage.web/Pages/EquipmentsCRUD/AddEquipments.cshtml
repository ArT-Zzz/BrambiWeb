@page
@using AutoGens
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using System.Globalization;
@using System.Security.Cryptography;
@using System.Text;
@{
    ViewData["Title"] = "Add Equipments";
    //await Html.RenderPartialAsync("Functions.cshtml");
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to add equipments.</p>

@functions
{ // declaration of all the Models that will be used in the html code
    List<Equipment>? AllEquipments {get; set;}
    List<Area>? AllAreas{get; set;}  
    List<Coordinator>? AllCoordinators {get; set;}
    List<Status>? AllStatus {get; set;}
    string Message ="";
    string? UserName {get; set; }
    
    // is called when the page is refreshed or when another page redirects the user to this page
    // receives all the fields necessary to add an equipment, previously entered by the user
    public void OnGet(string username, string EquipmentIdText, string NameText, short AreaText, string DescriptionText, byte StatusText, int YearText, string CoordinatorText, string ControlNumberText)
    {
        if(username != null)  Model.UserName = username;
        if(AreaText != 0 && StatusText != 0 && CoordinatorText!="0") 
        {
            var response = Functions.VerifyEquipmentIdControlNumber(EquipmentIdText, ControlNumberText); // verfies the control numbber is not already in use 
            if(response.ControlNumAffected == 0 && response.EquipAffected == 0)
            {
                var result = AddEquipment(EquipmentIdText, NameText, AreaText,  DescriptionText, YearText, StatusText, ControlNumberText, CoordinatorText); // adds a new equipment too the database
                if(result.Affected == 1)
                {
                    Model.Message = $"The equipment {EquipmentIdText} was successfully added! ";
                    Console.WriteLine($"The equipment {EquipmentIdText} was successfully added! ");
                }
                else
                {
                    Console.WriteLine("The equipment could not be added");
                    Model.Message = "The equipment could not be added";
                }
            }
            if(response.ControlNumAffected == 1){Model.Message ="That Control Number is already in use";}
            if(response.EquipAffected == 1){Model.Message = "That Equipment ID is already in use";}
        }
        else if(Model.Message == ""){}
        else
        {
            Model.Message = "The Equipment could not be added, one or more Camps are missing with verified information.";
            Console.WriteLine("The Equipment could not be added, one or more Camps are missing with verified information.");
        }
        Model.AllEquipments = Functions.ViewAllEquipments();
        Model.AllAreas = Functions.ListAreas();
        Model.AllCoordinators = Functions.ListCoordinators();
        Model.AllStatus = Functions.ListStatus();
    }
    
    // receives all equipment fields and creates an object to add to the database
    // returns number of rows affected and the equipment id oof the equipment that was just created
    static (int Affected, string EquipmentId) AddEquipment(string equipmentid, string name, short areaid, string description, int year, byte statusid, string controlnumber, string coordinatorid )
    {
        using(bd_storage db = new()) // creates connects connection with the database
        {
            if(db.Equipments is null){ return(0,"0");} // checks if the table exists inside the database
            Equipment e = new()  // creates a new object of Equipment type with all the previosuly entered values
            {
                EquipmentId = equipmentid, 
                Name = name,
                AreaId = areaid, 
                Description = description, 
                Year = year, 
                StatusId = statusid, 
                ControlNumber = controlnumber,
                CoordinatorId = coordinatorid //is already encrypted Coordinator ID
            };

            EntityEntry<Equipment> entity = db.Equipments.Add(e); // adds the object that was just created to Equipments table inside the database
            int affected = db.SaveChanges(); // saves chenages that were made inside the database and stores the number of rows that were affected
            return (affected, e.EquipmentId); // returns number of rows that were affected and the new Equipment ID
        }
    }
 // next line is the start of the html, and the forms where all the information is indicated 
}

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container">
            <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/EquipmentsCRUD/ViewAllEquipments" asp-route-username="@Model.UserName">View inventory</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/EquipmentsCRUD/AddEquipments" asp-route-username="@Model.UserName">Add Equipment</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/EquipmentsCRUD/UpdateEquipments" asp-route-username="@Model.UserName">Update Equipments</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/EquipmentsCRUD/SearchEquipmentById" asp-route-username="@Model.UserName">Search for One Equipment ID</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/EquipmentsCRUD/SearchEquipmentsByName" asp-route-username="@Model.UserName">Search By Equipment Name</a>
                    </li>
                </ul>
            </div>
        </div>
</nav>

@if(Model.Message != "")
{
    <h2>@Model.Message</h2>
}
else
{
<form method="get" action="/EquipmentsCRUD/AddEquipments">
    <input type="hidden" name="username" value="@Model.UserName">
    <div class="mb-3">
        <label class="form-label">Provide the new Equipment ID: </label>
        <input type="text" class="form-control" id="EquipmentIdText" name="EquipmentIdText" maxlength="15" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the new Equipment Name: </label>
        <input type="text" class="form-control" id="NameText" name="NameText" maxlength="40" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the new Equipment Year of Fabrication: </label>
        <input type="number" class="form-control" id="YearText" name="YearText" maxlength="4" min="1900" max="2100" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the new Equipment Area:</label>
        <select class="form-select" id="dropdown" name="AreaText">
            @if(Model.AllAreas is not null)
            {
                @foreach(var a in Model.AllAreas)
                { 
                    <option value="@a.AreaId">@a.Name</option>
                }
            }
            else
            {
                <option value = 0>No areas Found</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the new Equipment Description:</label>
        <input type="textarea" class="form-control" id="Description" name="DescriptionText" maxlength="255" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the new Equipment Status: </label>
        <select class="form-select" id="dropdown" name="StatusText">
            @if(Model.AllStatus is not null)
            {
                foreach(var s in Model.AllStatus)
                {
                    if(s.StatusId < 5 && s.StatusId !=2)
                    {
                        <option value ="@s.StatusId">@s.Value</option>
                    }
                }
            }
            else
            {
                <option value = 0>No Status Found</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the Equipment Control Number</label>
        <input type="text" class="form-control" id="ControlNumber" name="ControlNumberText" maxlength="20" required>
    </div>

    <div class="mb-3">
        <label class="form-label">Provide the Coordinator in charge of the Equipment: </label>
        <select class="form-select" id="dropdown" name="CoordinatorText">
            @if(Model.AllCoordinators is not null)
            {
                @foreach(var c in Model.AllCoordinators)
                {
                    <option value ="@c.CoordinatorId">@c.Name @c.LastNameP @c.LastNameM</option>
                }
            }
            else
            {
                <option value = "0">No Coordinators found</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" name="action" value="confirm">Add Equipment</button>

</form>
}