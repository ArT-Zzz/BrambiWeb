@page
@using AutoGens
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@{
    ViewData["Title"] = "Update Equipments";
}
<h1>@ViewData["Title"]</h1>
@functions
{
    string Message = "";
// IActionResult is a flexible interface, you can choose what you want to return for the client, views, redirect to other pages, like in this case
    public IActionResult OnGet(string EquipmentId, string NameText, short AreaText, string DescriptionText, byte StatusText, int YearText, string CoordinatorText, string ControlNumberText)
    {
        if(AreaText != 0 && StatusText != 0 && CoordinatorText!="0") // checking that all the sent info is not empty
        {
            //checks that the controlNumber received is not repeated in any other equipment that is not the equipment Id that is being updated
            //returns a 0 or 1, 0 when the controlNumber was not found in any different equipments, and 1 when it was found
            int ControlNumAffected = Functions.VerifyEquipmentIdControlNumberMinusThis(EquipmentId,ControlNumberText);
            if(ControlNumAffected == 0) // if the control number is not repeated, means 
            {
                //updates all the camps of the Equipment Object that corresponds to the EquipmentId sent, return 0 or 1 to know if it was updated
                int affected = UpdateEquipment(EquipmentId, NameText, AreaText,  DescriptionText, YearText, StatusText, ControlNumberText, CoordinatorText);
                AreaText = 0; StatusText = 0; CoordinatorText = "0";
                if(affected == 0)
                { 
                    Console.WriteLine("The equipment could not be updated");
                    TempData["ResultInfoShown"] = "0"; // if it couldn't be updated
                }
                else
                {
                    Console.WriteLine($"The camps of the Equipment were updated!");
                    TempData["ResultInfoShown"] = $"{affected}"; // if some camps but not all were updated
                }

                TempData["EquipmentId"] = EquipmentId; // save the info of message sent and the equipment id
                return RedirectToPage("/EquipmentsCRUD/ViewOneEquipment"); // redirecting to the page that shows one equipment and the message
            }
            else if(ControlNumAffected == 1)
            {
                Model.Message ="That Control Number is already in use"; // because the camps are not correct, so return
            }

        }
        // if it comes here is because something went wrong
        return Page(); // the return Page() means that it will return to this same page, reload the same page
    }
    //type int so returns the afected registers (0 or 1), receives all the parameters sent from the button of UpdateEquipments in the OnGet method
    public int UpdateEquipment(string equipmentid, string name, short areaid, string description, int year, byte statusid, string controlnumber, string coordinatorid )
    {
        using(bd_storage db = new()) // creating connection to the database
        {
            int affected = 0;
            IQueryable<Equipment> Equipment = db.Equipments. Where(e=>e.EquipmentId == equipmentid);
            if(Equipment is not null && Equipment.Any())
            {
                Equipment.First().Name = name;
                Equipment.First().AreaId = areaid;
                Equipment.First().Description = description;
                Equipment.First().Year = year;
                Equipment.First().StatusId = statusid;
                Equipment.First().ControlNumber = controlnumber;
                Equipment.First().CoordinatorId = coordinatorid;
                affected = db.SaveChanges();
            }
            return affected;
        }
    }
}

@if(Model.Message != "") // only if the update made to the equipment is in the control number, and the control number is repeated in any of the other equipments
{
    <h2>@Model.Message</h2> // shows the message of repeated control number, if not it will have redirected to the ViewOneEquipment
}
