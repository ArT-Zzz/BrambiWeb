@page
@using AutoGens
@using Microsoft.EntityFrameworkCore
@using System.Globalization;
@using System.Security.Cryptography;
@using System.Text;
@{
    ViewData["Title"] = "Add Requests";
}
<h1>@ViewData["Title"]</h1>

@functions
{
    List<Classroom>? AllClassrooms { get; set; }
    int? ChoosenClassroom { get; set; }
    List<Subject>? AllSubjects { get; set; }
    string? ChoosenSubject { get; set; }
    List<Professor>? AllProfessors { get; set; }
    string? ChoosenProfessor { get; set; }
    List<Schedule>? AllSchedulesInit {get; set;}
    List<Schedule>? AllSchedulesEnd {get; set;}
    List<Equipment>? AllEquipmentsAvailable {get; set;}
    List<string>? EquipmentsIdSelected {get; set;}
    string? StorerId { get; set; }
    string? MinDate { get; set; }
    string? MaxDate { get; set; }
    bool IsWeekendSelected { get; set; }
    bool ValidateHours {get; set;}
    bool ValidateHoursMinimun {get; set;}
    string? Username {get; set;}
    int SelectedEquipmentCount {get; set;}
    int RequestId {get; set;}

    public void OnGet(string username, int selectedOptionClass, string selectedOptionSub, string selectedOptionProf, string requestedDate, short selectedOptionInitTime, short selectedOptionEndTime, int selectedEquipmentCount, int requestId)
    {
        Console.WriteLine($"Username received in AddRequest: {username}");
        Model.StorerId = Functions.AddStorer();
        Model.Username=username;
        int LastRequestId = Functions.LastRequestId();
        if(Model.StorerId != ""){
            if(selectedOptionClass > 0 && selectedOptionProf != "0" && selectedOptionSub !="0"){
                if(selectedOptionClass > 0)
                {
                    Model.ChoosenClassroom = selectedOptionClass;
                    WriteLine("Classroom selected");
                }
                if(selectedOptionSub !="0")
                {
                    Model.ChoosenSubject = selectedOptionSub;
                    WriteLine("Subject selected");
                }
                if(selectedOptionProf !="0")
                {
                    Model.ChoosenProfessor = selectedOptionProf;
                }
                DateTime CurrentDate = DateTime.Now;
                // Añade un día a la fecha actual para establecer que solo se pueda seleccionar después de un día
                DateTime Tommorrow = CurrentDate.AddDays(1);
                // Formatea la fecha en el formato YYYY-MM-DD
                Model.MinDate = Tommorrow.ToString("yyyy-MM-dd");
                DateTime TwoWeeks = CurrentDate.AddDays(14);
                Model.MaxDate = TwoWeeks.ToString("yyyy-MM-dd");
                Model.IsWeekendSelected = false;
                DateTime RequestDate = DateTime.Parse(requestedDate);
                if(RequestDate.DayOfWeek==DayOfWeek.Saturday || RequestDate.DayOfWeek==DayOfWeek.Sunday)
                {
                    Model.IsWeekendSelected=false;
                }
                else{
                    Model.IsWeekendSelected=true;
                }
                if(selectedOptionInitTime> selectedOptionEndTime)
                {
                    ValidateHours=false;
                }
                else{
                    ValidateHours=true;
                }
                if((selectedOptionEndTime-selectedOptionInitTime) < 1)
                {
                    ValidateHoursMinimun=false;
                } else
                {
                    ValidateHoursMinimun=true;
                }
                if(selectedEquipmentCount>0)
                {
                    Model.SelectedEquipmentCount = selectedEquipmentCount;
                }
                WriteLine(Model.ChoosenClassroom.ToString(), Model.ChoosenProfessor, Model.ChoosenSubject, Model.Username, Model.StorerId);
                if(Model.ChoosenClassroom>0 && Model.ChoosenProfessor!="0" && Model.ChoosenProfessor !="0" && username is not null && Model.StorerId is not null)
                {
                    
                    var resultRequest=Functions.AddRequest(Model.ChoosenClassroom, Model.ChoosenProfessor, username, Model.StorerId, Model.ChoosenSubject, LastRequestId);
                    Model.RequestId= resultRequest.RequestId;
                    requestId=resultRequest.RequestId;
                }
            } 
            int difference = 10 - (int)selectedOptionInitTime;
            Model.AllClassrooms = Functions.ListClassrooms();
            Model.AllProfessors= Functions.ListProfessors();
            Model.AllSubjects =  Functions.ListSubjects();
            Model.AllSchedulesInit = Functions.ListSchedules(0, 9);
            Model.AllSchedulesEnd = Functions.ListSchedules(selectedOptionInitTime, (short)difference);
        }

    } 
}
    
<form method="get" action="/Formats/AddRequestDetailsFormat">
    @if(Model.StorerId!=""){
        <input type="hidden" name="username" value="@Model.Username">
        <fieldset>
            <legend>General Information</legend>

            <div class="mb-3">
                <label class="form-label">Provide the plantel:</label>
                <select class="form-select" id="dropdown" name="plantel" required>
                    <option value="colomos"> Colomos </option>
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label" for="dropdown">Select a classroom:</label>
                <select class="form-select" id="dropdown" name="selectedOptionClass" required>
                    @if(Model.AllClassrooms is not null)
                    {
                        @foreach(var c in Model.AllClassrooms)
                        { 
                            <option value="@c.ClassroomId">@c.Name</option>
                        }
                    }
                    else
                    {
                        <option value=0>No classrooms found</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label" for="dropdown">Select a subject:</label>
                <select class="form-select" id="dropdown" name="selectedOptionSub" required>
                    @if(Model.AllSubjects is not null)
                    {
                        @foreach(var c in Model.AllSubjects)
                        { 
                            <option value="@c.SubjectId">@c.Name</option>
                        }
                    }
                    else{
                        <option value="0">No subjects found</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label" for="dropdown">Select a professor:</label>
                <select class="form-select" id="dropdown" name="selectedOptionProf" required>
                    @if(Model.AllProfessors is not null)
                    {
                        @foreach(var c in Model.AllProfessors)
                        { 
                            <option value="@c.ProfessorId">@c.Name @c.LastNameP @c.LastNameM</option>
                        }
                    }
                    else
                    {
                        <option value="0">No professors found</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                    <label class="form-label" for="fecha">Select the date of the request:</label>
                    <input  type="date" id="requestedDate" name="requestedDate" min="@Model.MinDate" max="@Model.MaxDate" required>
                </div>
                @if (Model.IsWeekendSelected == true)
                {
                    <p style="color: red">You can not choose a Saturday or a Sunday</p>
                }
                <div class="mb-3">
                    <label class="form-label" for="dropdown">Select the start hour of the class:</label>
                    <select id="dropdown" name="selectedOptionInitTime" required>
                    @if(Model.AllSchedulesInit is not null)
                    {
                        @foreach(var c in Model.AllSchedulesInit)
                        { 
                            <option value="@c.ScheduleId">@c.InitTime.TimeOfDay</option>
                        }
                    }
                    else
                    {
                        <option value="0">No hours were found</option>
                    }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="dropdown">Select the end hour of the class:</label>
                    <select id="dropdown" name="selectedOptionEndTime" required>
                    @if(Model.AllSchedulesEnd is not null)
                    {
                        @foreach(var c in Model.AllSchedulesEnd)
                        { 
                            <option value="@c.ScheduleId">@c.InitTime.TimeOfDay</option>
                        }
                    }
                    else
                    {
                        <option value="0">No hours were found</option>
                    }
                    </select>
                </div>
                @if (Model.ValidateHours == false)
                {
                    <p style="color: red">The ending time cannot be before the starting time</p>
                } 
                @if(Model.ValidateHoursMinimun == false)
                {
                    <p style="color: red">The minimun of time must be 50 minuts</p>
                }
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipmentCount">Select the number of equipments (1-4):</label>
                    <input class="form-control" type="number" id="selectedEquipmentCount" name="selectedEquipmentCount" min="1" max="4" required>
                </div>
                <button type="submit" class="btn btn-primary" name="action" value="confirm">Continue</button>
                <input type="hidden" name="requestId" value="@Model.RequestId">
        </fieldset>
        
    }
</form>

