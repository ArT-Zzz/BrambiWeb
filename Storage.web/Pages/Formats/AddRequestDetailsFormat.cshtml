@page
@using AutoGens;
@using Microsoft.EntityFrameworkCore;
@using System.Globalization;
@using Microsoft.EntityFrameworkCore.ChangeTracking;
@using System.Net;
@using System.Diagnostics.CodeAnalysis;
@using System.Runtime.Intrinsics.Arm;
@{
    ViewData["Title"] = "Add Requests Details";
}
<h1>@ViewData["Title"]</h1>

@functions
{
    List<Equipment>? AllEquipmentsAvailable {get; set;}
    List<string>? EquipmentsIdSelected {get; set;} = new List<string>();
    int? ChoosenClassroom { get; set; }
    string? ChoosenSubject { get; set; }
    string? ChoosenProfessor { get; set; }
    string? StorerId { get; set; }
    short? ChoosenInitTime {get; set;}
    short? ChoosenEndTime {get; set;}
    string? ChoosenRequestedDate{get; set;}
    bool ValidateAll {get; set;} 
    string? Username {get; set;}
    int SelectedEquipmentCount {get; set;}
    int LastRequestId {get; set;}
    string? Message {get; set;}
    string? MessageDuplicated {get; set;}
    
    // Función que recibe valores del formulario para crear un registro en las tamblas Request y Request Details
    public IActionResult OnGet(string username, int selectedOptionClass, string selectedOptionSub, string selectedOptionProf, string requestedDate, short selectedOptionInitTime, short selectedOptionEndTime, int selectedEquipmentCount, int requestId, string selectedEquipment1, string selectedEquipment2, string selectedEquipment3, string selectedEquipment4)
    {
        // Declaracion de variables al Model para poder obtener los valores enviados de AddRequest
        Model.Username=username;
        Model.ChoosenClassroom=selectedOptionClass;
        Model.ChoosenProfessor=selectedOptionProf;
        Model.ChoosenSubject=selectedOptionSub;
        Model.ChoosenRequestedDate=requestedDate;
        Model.ChoosenInitTime=selectedOptionInitTime;
        Model.ChoosenEndTime=selectedOptionEndTime;
        Model.SelectedEquipmentCount=selectedEquipmentCount;

        WriteLine($"username: {Model.Username}");
        WriteLine($"classroom: {Model.ChoosenClassroom}");
        WriteLine($"ChoosenSubject: {Model.ChoosenSubject}");
        WriteLine($"ChoosenRequestedDate: {Model.ChoosenRequestedDate}");
        WriteLine($"ChoosenInitTime: {Model.ChoosenInitTime}");
        WriteLine($"ChoosenEndTime: {Model.ChoosenEndTime}");
        WriteLine($"SelectedEquipmentCount: {Model.SelectedEquipmentCount}");
        // Función para validar que los dias y las horas sean correctas
        Model.Message=Validations(requestedDate, selectedOptionInitTime, selectedOptionEndTime);
        // Si el mensaje que retorna es diferente de "0" quiere decir que hay un dato mal
        if(Model.Message!="0")
        {
            // Pone un valor bool en falso para evitar que pueda ingresar otro dato
            Model.ValidateAll=false;
            // Guarda el mensaje en un TempData
            TempData["Message"] = Model.Message;
            // Manda el mensaje a través del TempData a la página anterior donde pide esos datos de nuevo
            return RedirectToPage("/Formats/AddRequestFormat"); 
        }
        // Si el valor que retorna es "0" quiere decir que todo esta dentro de los parametros
        if(Model.Message=="0")
        {
            // Pone el valor bool en true para que se muestre el formulario
            Model.ValidateAll=true;
            // Llama funcion para verificar que exista un almacenista 
            Model.StorerId = Functions.AddStorer();
            // Si no existe regresa un " ", por lo que si es diferente a " " hay un almacenista y puede pedir material
            if(Model.StorerId != "")
            {
                // Verifica que el usuario no haya seleccionado 0 o un valor menor
                if(Model.SelectedEquipmentCount > 0)
                {
                    // Imprime la cantidad de equipos que va a seleccionar
                    WriteLine($"The equipments to select are:{Model.SelectedEquipmentCount}");
                    // Lista los equipos disponibles para fecha y hora de la clase
                    var resultEquipments = Functions.ListEquipmentsAvailable(DateTime.Parse(requestedDate), selectedOptionInitTime, selectedOptionEndTime);
                    // Guarda el valor 
                    Model.AllEquipmentsAvailable = resultEquipments.EquipmentsList;
                    WriteLine(selectedEquipment1);
                    if(Model.SelectedEquipmentCount==2)
                    {
                        if(selectedEquipment1 != selectedEquipment2)
                        {
                            WriteLine("The equipments were added succesfull");
                            Model.MessageDuplicated=" ";
                        }
                        else
                        {
                            WriteLine("The equipments were duplicated. Try again.");
                            Model.MessageDuplicated="The equipments are duplicated, change them to continue";
                        }
                    }
                    else if(Model.SelectedEquipmentCount==3)
                    {
                        if(selectedEquipment1 != selectedEquipment2 && selectedEquipment1 != selectedEquipment3 && selectedEquipment2 != selectedEquipment3)
                        {
                            WriteLine("The equipments were added succesfull");
                            Model.MessageDuplicated=" ";
                        }
                        else
                        {
                            WriteLine("The equipments were duplicated. Try again.");
                            Model.MessageDuplicated="The equipments are duplicated, change them to continue";
                        }
                    }
                    else if(Model.SelectedEquipmentCount==4)
                    {
                        if(selectedEquipment1 != selectedEquipment2 && selectedEquipment1 != selectedEquipment3 && selectedEquipment2 != selectedEquipment3 && selectedEquipment1!=selectedEquipment4 && selectedEquipment2!=selectedEquipment4 && selectedEquipment3!= selectedEquipment4)
                        {
                            WriteLine("The equipments were added succesfull");
                            Model.MessageDuplicated=" ";
                        }
                        else
                        {
                             WriteLine("The equipments were duplicated. Try again.");
                            Model.MessageDuplicated="The equipments are duplicated, change them to continue";
                        }
                    }
                    if(Model.SelectedEquipmentCount>=1 && selectedEquipment1 is not null)
                    {
                        WriteLine("Enters here 1");
                        Model.EquipmentsIdSelected.Add(selectedEquipment1);
                    }
                    WriteLine(selectedEquipment2);
                    if(selectedEquipmentCount>=2 && Model.EquipmentsIdSelected is not null && selectedEquipment2 is not null)
                    {
                        Model.EquipmentsIdSelected.Add(selectedEquipment2);
                        WriteLine("Enters here 2");
                    }
                    WriteLine(selectedEquipment3);
                    if(selectedEquipmentCount>=3 && Model.EquipmentsIdSelected is not null && selectedEquipment3 is not null)
                    {
                        Model.EquipmentsIdSelected.Add(selectedEquipment3);
                        WriteLine("Enters here 3");
                    } 
                    WriteLine(selectedEquipment4);
                    if(selectedEquipmentCount==4 && Model.EquipmentsIdSelected is not null && selectedEquipment4 is not null)
                    {
                        Model.EquipmentsIdSelected.Add(selectedEquipment4);
                        WriteLine("Enters here 4");
                    }
                    
                    if(Model.EquipmentsIdSelected is not null && EquipmentsIdSelected.Count()> 0)
                    {
                        foreach (var s in Model.EquipmentsIdSelected)
                        {
                            WriteLine($"The equipment selected is {s}");   
                        }
                        
                        if(Model.MessageDuplicated==" ")
                        {
                            int lastIdRequest = Functions.LastRequestId();
                            var resultEquipmentsVerified = Functions.AddEquipmentsAndStatus(Model.EquipmentsIdSelected);
                            var request = AddRequest(selectedOptionClass, selectedOptionProf, Model.Username, Model.StorerId, selectedOptionSub, lastIdRequest);
                            var requestDetails = AddRequestDetails(request.RequestId, resultEquipmentsVerified.EquipmentsId, 0, resultEquipments.InitTime, resultEquipments.EndTime, DateTime.Parse(requestedDate), DateTime.Now, resultEquipmentsVerified.StatusEquipments);
                            if(requestDetails.Affected.Count() > 0)
                            {
                                WriteLine("the request was added");
                                return RedirectToPage("/Users/Students/StudentsPrincipal"); 
                            } else
                            {
                                WriteLine("the request was not added"); 
                               // Functions.
                                return RedirectToPage("Formats/AddRequestFormat");
                            }
                        }
                    }
                    else{
                        WriteLine("Nothing");
                    }
                }
            }
        }
        return Page();
    }

    
    public string Validations(string RequestDate, short selectedOptionInitTime, short selectedOptionEndTime)
    {
        string Message="0";
        DateTime CurrentDate = DateTime.Now;
        // Añade un día a la fecha actual para establecer que solo se pueda seleccionar después de un día
        DateTime Tommorrow = CurrentDate.AddDays(1);
        // Formatea la fecha en el formato YYYY-MM-DD
        DateTime requestDate = DateTime.Parse(RequestDate);
        if(requestDate.DayOfWeek==DayOfWeek.Saturday || requestDate.DayOfWeek==DayOfWeek.Sunday)
        {
            return "You cannot choose a Saturday or a Sunday";
        }
        if(selectedOptionInitTime>selectedOptionEndTime)
        {
            return "The ending time cannot be before the starting time";
        }
        if(selectedOptionEndTime - selectedOptionInitTime < 1)
        {
            return "The minimun of time must be 50 minuts";
        }
        return Message;
    }

    public static (int Affected, int RequestId) AddRequest(int? ClassroomId, string? ProfessorId, string? StudentId, string? StorerId, string? SubjectId, int LastRequestId){
        using(bd_storage db = new()){
            // Verifica que exista la tabla
            if(db.Requests is null){ 
                throw new InvalidOperationException("The table request is not found");
            }
            else{ // Si existe la tabla
                // Crea el objeto y le asigna valores
                Request r  = new Request()
                {
                    RequestId = LastRequestId,
                    ClassroomId = ClassroomId,
                    ProfessorId = ProfessorId,
                    StudentId = StudentId,
                    StorerId = StorerId,
                    SubjectId = SubjectId,
                };
                // Agrega el objeto a la tabla
                EntityEntry<Request> Entity = db.Requests.Add(r);
                // Cambia los valores de la bd
                int Affected = db.SaveChanges();
                // Retorna los valores de filas aceptadas y el ID del nuevo request
                return (Affected, r.RequestId);
            }
        }
    }

    public static (List<int> Affected, List<int> RequestDetailsId) AddRequestDetails(int RequestId, List<string>? EquipmentsId, int ProfessorNip, DateTime InitTime, DateTime EndTime, DateTime RequestedDate, DateTime CurrentDate, List<byte?>? StatusEquipments){
        // Variable para establecer el índice de las listas de los nombres de los equipos y los status de estos
        int i=0;
        // Lista que almacena los requestDetails Id de los registros nuevos agregados en la tabla
        List<int>? RequestDetailsId = new List<int>();
        // Lista que almacena cuantas filas fueron afectadas en la tabla de Request Details al momento de re
        List<int>? Affecteds = new List<int>();
        // Verifica que la lista de equipmentId y statusId sean del mismo tamaño y no tengan valores nulos para poder usarlos
        if (EquipmentsId == null || StatusEquipments == null || EquipmentsId.Count != StatusEquipments.Count)
        {
            // Manejar el caso donde las listas no son válidas
            // Si no son validas muestra el mensaje y retorna los valores
            WriteLine("The equipment selected was not correctly added. Try again.");
            //DeleteRequest(RequestId);
            return (Affecteds, RequestDetailsId);
        } else {
            using (bd_storage db = new()){
                // Si la tabla no existe se lanza una excepcion
                if(db.RequestDetails is null){ 
                    throw new InvalidOperationException ("The table Request Details does not exist. Verify it");
                }
                int requestDetailId = Functions.LastRequestDetailId();
                // Por cada equipo registrado en la tabla se genera una fila de datos en Request Details, donde se llenan los campos 
                //con los datos recibidos por los parametros
                foreach(var e in EquipmentsId){
                    RequestDetail rD = new() {
                        RequestDetailsId = requestDetailId,
                        RequestId = RequestId,
                        EquipmentId = EquipmentsId[i],
                        StatusId = StatusEquipments[i],
                        ProfessorNip = ProfessorNip,
                        DispatchTime = InitTime,
                        ReturnTime = EndTime,
                        RequestedDate = RequestedDate,
                        CurrentDate = CurrentDate
                    };
                    // Se añaden los datos a la tabla
                    EntityEntry<RequestDetail> entity = db.RequestDetails.Add(rD);
                    // Se guardan los datos en la bd y el valor de las filas affectadas se guarda en la lista de affecteds
                    Affecteds.Add(db.SaveChanges());
                    // Se guardan los ID generados en la lista de ID's
                    RequestDetailsId.Add(rD.RequestDetailsId);
                    // Aumenta el indice de las listas
                    i++;
                    requestDetailId++;
                }
            }
        }
        return (Affecteds, RequestDetailsId);
    }
}
    
<form method="get" action="/Formats/AddRequestDetailsFormat">
    @if(ValidateAll==true)
    {
        /**/
            @if(Model.StorerId!=""){
            <input type="hidden" name="username" value="@Model.Username">
            <input type="hidden" name="selectedOptionClass" value="@Model.ChoosenClassroom">
            <input type="hidden" name="selectedOptionProf" value="@Model.ChoosenProfessor">
            <input type="hidden" name="selectedOptionSub" value="@Model.ChoosenSubject">
            <input type="hidden" name="requestedDate" value="@Model.ChoosenRequestedDate">
            <input type="hidden" name="selectedOptionInitTime" value="@Model.ChoosenInitTime">
            <input type="hidden" name="selectedOptionEndTime" value="@Model.ChoosenEndTime">
            <input type="hidden" name="selectedEquipmentCount" value="@Model.SelectedEquipmentCount">
            @if(Model.SelectedEquipmentCount == 1)
            {
                <div class="mb-3">
                        <label class="form-label" for="selectedEquipment">Select the equipment :</label>
                        <select class="form-select" id="dropdown" name="selectedEquipment1" required>
                            @if(Model.AllEquipmentsAvailable is not null)
                            {
                                foreach(var a in Model.AllEquipmentsAvailable)
                                { 
                                    <option value="@a.EquipmentId">@a.Name</option>
                                }
                            }
                            else
                            {
                                <option value="0">No equipments found</option>
                            }
                        </select>
                    </div>
                <button type="submit" class="btn btn-primary" name="action" value="confirm">Submit</button>
            }
            else if(Model.SelectedEquipmentCount == 2)
            {
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment :</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment1" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment :</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment2" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                @if(Model.MessageDuplicated == "The equipments are duplicated, change them to continue")
                {
                    <p style="color: red">@Model.MessageDuplicated</p>
                } 
                <button type="submit" class="btn btn-primary" name="action" value="confirm">Confirm</button>
            }
            else if(Model.SelectedEquipmentCount == 3)
            {
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 1:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment1" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 2:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment2" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 3:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment3" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                @if(Model.MessageDuplicated == "The equipments are duplicated, change them to continue")
                {
                    <p style="color: red">@Model.MessageDuplicated</p>
                } 
                <button type="submit" class="btn btn-primary" name="action" value="confirm">Confirm</button>
            }
            else if (Model.SelectedEquipmentCount==4)
            {
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 1:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment1" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 2:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment2" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 3:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment3" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="selectedEquipment">Select the equipment 4:</label>
                    <select class="form-select" id="dropdown" name="selectedEquipment4" required>
                        @if(Model.AllEquipmentsAvailable is not null)
                        {
                            foreach(var a in Model.AllEquipmentsAvailable)
                            { 
                                <option value="@a.EquipmentId">@a.Name</option>
                            }
                        }
                        else
                        {
                            <option value="0">No equipments found</option>
                        }
                    </select>
                </div>
                @if(Model.MessageDuplicated=="The equipments are duplicated, change them to continue")
                {
                    <p style="color: red">@Model.MessageDuplicated</p>
                } 
                <button type="submit" class="btn btn-primary" name="action" value="confirm">Confirm</button>
            }
        }
    }
    
</form>

