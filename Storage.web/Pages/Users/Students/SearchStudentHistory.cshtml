@page
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Microsoft.AspNetCore.Html;
@using AutoGens
@{
    ViewData["Title"] = "Student history";
}

<div class="container">
    <h1 class="display-4">Student History</h1>

    <form method="post">
        <div class="form-group">
            <label for="studentId">Student ID:</label>
            <input type="text" id="studentId" name="studentId" class="form-control" required />
        </div>

        <button type="submit" class="btn btn-primary">Search Student History</button>
    </form>

    @if (Request.Method == "POST")
    {
        <div class="mt-3">
            <h3>Search Results:</h3>
            @{
                // Invocar la lógica de búsqueda del historial del estudiante y almacenar los resultados en una variable
                var searchResults = SearchStudentGeneral(Request.Form["studentId"]);
            }

            @if (searchResults != null)
            {
                @searchResults
            }
            else
            {
                <p>No student history found for the specified ID.</p>
            }
        </div>
    }
</div>

@functions
{
    public static IHtmlContent SearchStudentGeneral(string studentId)
    {
        using (bd_storage db = new())
        {
            var student = db.Students
                .Include(g => g.Group)
                .SingleOrDefault(s => s.StudentId == studentId);

            if (student == null)
            {
                return null; // Puedes devolver null o un mensaje indicando que no se encontró el estudiante.
            }

            var requests = db.Requests.Where(r => r.StudentId == student.StudentId).ToList();

            if (requests.Count == 0)
            {
                return null; // Puedes devolver null o un mensaje indicando que no hay historial para el estudiante.
            }

            // Realiza una lista de enteros de los Id de los request del estudiante
            List<int> requestIds = requests.Select(r => r.RequestId).ToList();
                

            IQueryable<RequestDetail> RequestDetails = db.RequestDetails
                .Include(s=>s.Status)
                .Where(rd => requestIds.Contains((int)rd.RequestId))
                .Include(rd => rd.Equipment);

            var groupedRequests = RequestDetails.GroupBy(r => r.RequestId);

            var resultTable = new TagBuilder("table");
            resultTable.AddCssClass("table");

            var thead = new TagBuilder("thead");
            thead.InnerHtml.AppendHtml("<tr><th>No.</th><th>Request Detail Id</th><th>Dispatch Time</th><th>Return Time</th><th>Request Date</th><th>Current Date</th><th>Equipment Name</th></tr>");
            resultTable.InnerHtml.AppendHtml(thead);

            var tbody = new TagBuilder("tbody");

            int i = 0;
            foreach (var group in groupedRequests)
            {
                i++;
                var firstRequest = group.First();

                var row = new TagBuilder("tr");
                row.InnerHtml.AppendHtml($"<td>{i}</td><td>{firstRequest.RequestId}</td><td>{firstRequest.DispatchTime.TimeOfDay}</td><td>{firstRequest.ReturnTime.TimeOfDay}</td><td>{firstRequest.RequestedDate:dd/MM/yyyy}</td><td>{firstRequest.CurrentDate:dd/MM/yyyy}</td><td>{group.First().Equipment.Name}</td>");

                tbody.InnerHtml.AppendHtml(row);
            }

            resultTable.InnerHtml.AppendHtml(tbody);

            return resultTable;
        }
    }
}
