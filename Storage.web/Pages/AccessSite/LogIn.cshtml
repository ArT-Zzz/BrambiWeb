@page
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using AutoGens
@{
    ViewData["Title"] = "Login";
    ViewData["ShowNavBar"] = false;
    bool logged = false;

    if (Request.Method == "POST")
    {
        (logged, var rol, var username) = IniciarSesion(Request.Form["username"], Request.Form["password"]);

        if (logged)
        {
            // Redirigir a la página principal del usuario según su rol
            var redirectUrl = GetRedirectUrl(rol);
            TempData["Username"] = username;
            Response.Redirect(redirectUrl);
        }
    }
}

<div class="container">
    <h1 class="display-4">Login</h1>

    <form method="post">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" class="form-control" required />
        </div>

        <div class="form-group">
            <label class="form-label" for="password">Password:</label>
            <input class="form-control" type="password" id="password" name="password" class="form-control" required />
        </div>

        <p></p>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>

    <a class="btn btn-warning" style="margin-top: 5px;" asp-page="/Password.Recovery">Forgot Password</a>

    @if (Request.Method == "POST" && !logged)
    {
        <div class="alert alert-danger mt-3" role="alert">
            Login failed. Please check your username and password.
        </div>
    }
</div>

@functions {
    public static (bool logged, string? rol, string username) IniciarSesion(string username, string password)
    {
        using (bd_storage db = new())
        {
            Console.WriteLine("Write your ID: ");
            string UserName = username;
            WriteLine(UserName);
            string encryptedUsername = Functions.EncryptPass(username);
            Console.WriteLine($"Encrypted Username: {encryptedUsername}");

            string encryptedPassword = Functions.EncryptPass(password);

            var (rol, user) = AuthenticateUser(db, encryptedUsername, encryptedPassword, UserName);

            return (rol != null, rol, user);
        }
    }

    private static (string? rol, string user) AuthenticateUser(bd_storage db, string encryptedUsername, string encryptedPassword, string username)
    {
        var students = db.Students.Where(s => s.StudentId == username && s.Password == encryptedPassword).ToList();
        if (students.Any())
        {
            return ("students", username);
        }

        var professors = db.Professors.Where(p => p.ProfessorId == encryptedUsername && p.Password == encryptedPassword).ToList();
        if (professors.Any())
        {
            return ("professors", encryptedUsername);
        }

        var storers = db.Storers.Where(s => s.StorerId == encryptedUsername && s.Password == encryptedPassword).ToList();
        if (storers.Any())
        {
            return ("storers", encryptedUsername);
        }

        var coordinators = db.Coordinators.Where(c => c.CoordinatorId == encryptedUsername && c.Password == encryptedPassword).ToList();
        if (coordinators.Any())
        {
            return ("coordinators", encryptedUsername);
        }

        return (null, "");
    }

    private static string GetRedirectUrl(string role)
    {
        return role switch
        {
            "students" => "/Users/Students/StudentsPrincipal",
            "professors" => "/Users/Professors/ProfessorPrincipal",
            "storers" => "/Users/Storer/StorerPrincipal",
            "coordinators" => "/Users/Coordinator/CoordinatorPrincipal",
            _ => "/Error", // Cambia "/Error" a la página de error adecuada
        };
    }
}
