@page
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using AutoGens
@{
    ViewData["Title"] = "Password Recovery";
}

<div class="container">
    <h1 class="display-4">Password Recovery</h1>

    <form method="post">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" class="form-control" required />
        </div>

        <button type="submit" class="btn btn-primary">Recover Password</button>
    </form>

    @if (Request.Method == "POST")
    {
        <div class="mt-3">
            <h3>Password Recovery Results:</h3>
            @{
                // Invocar la lógica de recuperación de contraseña aquí
                var recoveryResults = RecuperarContraseña(Request.Form["username"]);
            }

            @if (!string.IsNullOrEmpty(recoveryResults))
            {
                <p>@recoveryResults</p>
            }
            else
            {
                <p>No matching records found for the specified username.</p>
            }
        </div>
    }
</div>

@functions 
{
    public static string RecuperarContraseña(string username)
    {
        using (bd_storage db = new())
        {
            string[] tables = { "students", "professors", "storers", "coordinators" };

            foreach (string tableName in tables)
            {
                string idUser = "";
                switch (tableName)
                {
                    case "students":
                        idUser = "studentId";
                        break;
                    case "professors":
                        idUser = "professorId";
                        break;
                    case "storers":
                        idUser = "storerId";
                        break;
                    case "coordinators":
                        idUser = "coordinatorId";
                        break;
                    default:
                        idUser = "";
                        break;
                }

                // query to find user id                
                if (idUser == "studentId")
                {
                    // SELECT * FROM [UserTable] WHERE [UserTablePK] = UsernameInput
                    IQueryable<Student> students = db.Students.Where(s => s.StudentId == username);
                    // checks if there are any registers with the desired ID
                    if (students is not null && students.Any())
                    {
                        var firstStudent = students.First();
                        if (firstStudent.StudentId != null)
                        {
                            WriteLine($"StudentID : {firstStudent.StudentId} - Password : {Functions.Decrypt(firstStudent.Password)}");
                            string res = Functions.Decrypt(firstStudent.Password);
                            return res;
                        }
                        else
                        {
                            WriteLine("Student ID is null");
                            return null;
                        }
                    }
                }
                else if (idUser == "professorId")
                {
                    IQueryable<Professor>? professors = db.Professors
                        .Where(p => p.ProfessorId == Functions.EncryptPass(username));

                    if (professors is not null || professors.Any())
                    {
                        foreach (var professor in professors)
                        {
                            WriteLine($"ProfessorID : {Functions.Decrypt(professor.ProfessorId)} - Password : {Functions.Decrypt(professor.Password)}");
                            string res = Functions.Decrypt(professor.Password);
                            return res;
                        }
                    }
                }
                else if (idUser == "storerId")
                {
                    IQueryable<Storer>? storers = db.Storers.Where(s => s.StorerId == Functions.EncryptPass(username));

                    if (storers is not null || storers.Any())
                    {
                        foreach (var storer in storers)
                        {
                            WriteLine($"StorerID : {Functions.Decrypt(storer.StorerId)} - Password : {Functions.Decrypt(storer.Password)}");
                            string res = Functions.Decrypt(storer.Password);
                            return res;
                        }
                    }
                }
                else if (idUser == "coordinatorId")
                {
                    IQueryable<Coordinator>? coordinators = db.Coordinators
                        .Where(c => c.CoordinatorId == Functions.EncryptPass(username));
                    if (coordinators is not null || coordinators.Any())
                    {
                        foreach (var coordinator in coordinators)
                        {
                            WriteLine($"CoordinatorId : {Functions.Decrypt(coordinator.CoordinatorId)} - Password : {Functions.Decrypt(coordinator.Password)}");
                            string res = Functions.Decrypt(coordinator.Password);
                            return res;
                        }
                    }
                }
            }
        }
        return null;
    }
}